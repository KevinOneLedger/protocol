=== RUN   TestLog
Test:
(*serial.RootStruct2)({
    RootName: (string) (len=10) "The Root 2",
    Count: (int) 2000,
    Node1: (*serial.NodeStruct1)({
        NodeName: (string) (len=10) "The Node 1",
        Size: (int) 1000,
        Interface: (interface {}) <nil>,
        Primitives: (serial.Primitives) {
            Boolean: (bool) false,
            Integer: (int) 0,
            Int8: (int8) 0,
            Int16: (int16) 0,
            Int32: (int32) 0,
            Int64: (int64) 0,
            UnsignedInt: (uint) 0,
            Uint8: (uint8) 0,
            Uint16: (uint16) 0,
            Uint32: (uint32) 0,
            Uint64: (uint64) 0,
            Float32: (float32) 0,
            Float64: (float64) 0,
            String: (string) ""
        },
        Containers: (serial.Containers) {
            Slice: ([]int) <nil>,
            Map: (map[string]string) <nil>,
            Array: ([]uint8) <nil>
        }
    }),
    Node2: (serial.NodeStruct2) {
        NodeName: (string) (len=11) "The Child 2",
        Size: (int) 3000,
        Size2: (int) -1,
        Interface: (interface {}) <nil>,
        Primitives: (serial.Primitives) {
            Boolean: (bool) false,
            Integer: (int) 0,
            Int8: (int8) 0,
            Int16: (int16) 0,
            Int32: (int32) 0,
            Int64: (int64) 0,
            UnsignedInt: (uint) 0,
            Uint8: (uint8) 0,
            Uint16: (uint16) 0,
            Uint32: (uint32) 0,
            Uint64: (uint64) 0,
            Float32: (float32) 0,
            Float64: (float64) 0,
            String: (string) ""
        },
        Containers: (serial.Containers) {
            Slice: ([]int) <nil>,
            Map: (map[string]string) <nil>,
            Array: ([]uint8) <nil>
        }
    },
    Interface: (interface {}) <nil>,
    Primitives: (serial.Primitives) {
        Boolean: (bool) false,
        Integer: (int) 0,
        Int8: (int8) 0,
        Int16: (int16) 0,
        Int32: (int32) 0,
        Int64: (int64) 0,
        UnsignedInt: (uint) 0,
        Uint8: (uint8) 0,
        Uint16: (uint16) 0,
        Uint32: (uint32) 0,
        Uint64: (uint64) 0,
        Float32: (float32) 0,
        Float64: (float64) 0,
        String: (string) ""
    },
    Containers: (serial.Containers) {
        Slice: ([]int) <nil>,
        Map: (map[string]string) <nil>,
        Array: ([]uint8) <nil>
    }
})

--- PASS: TestLog (0.00s)
=== RUN   TestStack
D[10-11|17:53:20.325] Stack                                        index=0 value=Top
D[10-11|17:53:20.325] Stack                                        index=1 value=Middle
D[10-11|17:53:20.325] Stack                                        index=2 value=Bottom
D[10-11|17:53:20.325] Top                                          is=Top
D[10-11|17:53:20.325] Middle                                       is=Middle
D[10-11|17:53:20.325] Bottom                                       is=Bottom
--- PASS: TestStack (0.00s)
=== RUN   TestPrint
#### Node:
(string) (len=10) "The Root 2"

#### Node:
(int) 2000

#### Node:
(string) (len=10) "The Node 1"

#### Node:
(int) 1000

#### Node:
(interface {}) <nil>

#### Node:
(bool) false

#### Node:
(int) 0

#### Node:
(int8) 0

#### Node:
(int16) 0

#### Node:
(int32) 0

#### Node:
(int64) 0

#### Node:
(uint) 0

#### Node:
(uint8) 0

#### Node:
(uint16) 0

#### Node:
(uint32) 0

#### Node:
(uint64) 0

#### Node:
(float32) 0

#### Node:
(float64) 0

#### Node:
(string) ""

#### Node:
(serial.Primitives) {
    Boolean: (bool) false,
    Integer: (int) 0,
    Int8: (int8) 0,
    Int16: (int16) 0,
    Int32: (int32) 0,
    Int64: (int64) 0,
    UnsignedInt: (uint) 0,
    Uint8: (uint8) 0,
    Uint16: (uint16) 0,
    Uint32: (uint32) 0,
    Uint64: (uint64) 0,
    Float32: (float32) 0,
    Float64: (float64) 0,
    String: (string) ""
}

#### Node:
([]int) <nil>

#### Node:
(map[string]string) <nil>

#### Node:
([]uint8) <nil>

#### Node:
(serial.Containers) {
    Slice: ([]int) <nil>,
    Map: (map[string]string) <nil>,
    Array: ([]uint8) <nil>
}

#### Node:
(serial.NodeStruct1) {
    NodeName: (string) (len=10) "The Node 1",
    Size: (int) 1000,
    Interface: (interface {}) <nil>,
    Primitives: (serial.Primitives) {
        Boolean: (bool) false,
        Integer: (int) 0,
        Int8: (int8) 0,
        Int16: (int16) 0,
        Int32: (int32) 0,
        Int64: (int64) 0,
        UnsignedInt: (uint) 0,
        Uint8: (uint8) 0,
        Uint16: (uint16) 0,
        Uint32: (uint32) 0,
        Uint64: (uint64) 0,
        Float32: (float32) 0,
        Float64: (float64) 0,
        String: (string) ""
    },
    Containers: (serial.Containers) {
        Slice: ([]int) <nil>,
        Map: (map[string]string) <nil>,
        Array: ([]uint8) <nil>
    }
}

#### Node:
(string) (len=11) "The Child 2"

#### Node:
(int) 3000

#### Node:
(int) -1

#### Node:
(interface {}) <nil>

#### Node:
(bool) false

#### Node:
(int) 0

#### Node:
(int8) 0

#### Node:
(int16) 0

#### Node:
(int32) 0

#### Node:
(int64) 0

#### Node:
(uint) 0

#### Node:
(uint8) 0

#### Node:
(uint16) 0

#### Node:
(uint32) 0

#### Node:
(uint64) 0

#### Node:
(float32) 0

#### Node:
(float64) 0

#### Node:
(string) ""

#### Node:
(serial.Primitives) {
    Boolean: (bool) false,
    Integer: (int) 0,
    Int8: (int8) 0,
    Int16: (int16) 0,
    Int32: (int32) 0,
    Int64: (int64) 0,
    UnsignedInt: (uint) 0,
    Uint8: (uint8) 0,
    Uint16: (uint16) 0,
    Uint32: (uint32) 0,
    Uint64: (uint64) 0,
    Float32: (float32) 0,
    Float64: (float64) 0,
    String: (string) ""
}

#### Node:
([]int) <nil>

#### Node:
(map[string]string) <nil>

#### Node:
([]uint8) <nil>

#### Node:
(serial.Containers) {
    Slice: ([]int) <nil>,
    Map: (map[string]string) <nil>,
    Array: ([]uint8) <nil>
}

#### Node:
(serial.NodeStruct2) {
    NodeName: (string) (len=11) "The Child 2",
    Size: (int) 3000,
    Size2: (int) -1,
    Interface: (interface {}) <nil>,
    Primitives: (serial.Primitives) {
        Boolean: (bool) false,
        Integer: (int) 0,
        Int8: (int8) 0,
        Int16: (int16) 0,
        Int32: (int32) 0,
        Int64: (int64) 0,
        UnsignedInt: (uint) 0,
        Uint8: (uint8) 0,
        Uint16: (uint16) 0,
        Uint32: (uint32) 0,
        Uint64: (uint64) 0,
        Float32: (float32) 0,
        Float64: (float64) 0,
        String: (string) ""
    },
    Containers: (serial.Containers) {
        Slice: ([]int) <nil>,
        Map: (map[string]string) <nil>,
        Array: ([]uint8) <nil>
    }
}

#### Node:
(interface {}) <nil>

#### Node:
(bool) false

#### Node:
(int) 0

#### Node:
(int8) 0

#### Node:
(int16) 0

#### Node:
(int32) 0

#### Node:
(int64) 0

#### Node:
(uint) 0

#### Node:
(uint8) 0

#### Node:
(uint16) 0

#### Node:
(uint32) 0

#### Node:
(uint64) 0

#### Node:
(float32) 0

#### Node:
(float64) 0

#### Node:
(string) ""

#### Node:
(serial.Primitives) {
    Boolean: (bool) false,
    Integer: (int) 0,
    Int8: (int8) 0,
    Int16: (int16) 0,
    Int32: (int32) 0,
    Int64: (int64) 0,
    UnsignedInt: (uint) 0,
    Uint8: (uint8) 0,
    Uint16: (uint16) 0,
    Uint32: (uint32) 0,
    Uint64: (uint64) 0,
    Float32: (float32) 0,
    Float64: (float64) 0,
    String: (string) ""
}

#### Node:
([]int) <nil>

#### Node:
(map[string]string) <nil>

#### Node:
([]uint8) <nil>

#### Node:
(serial.Containers) {
    Slice: ([]int) <nil>,
    Map: (map[string]string) <nil>,
    Array: ([]uint8) <nil>
}

#### Node:
(serial.RootStruct2) {
    RootName: (string) (len=10) "The Root 2",
    Count: (int) 2000,
    Node1: (*serial.NodeStruct1)({
        NodeName: (string) (len=10) "The Node 1",
        Size: (int) 1000,
        Interface: (interface {}) <nil>,
        Primitives: (serial.Primitives) {
            Boolean: (bool) false,
            Integer: (int) 0,
            Int8: (int8) 0,
            Int16: (int16) 0,
            Int32: (int32) 0,
            Int64: (int64) 0,
            UnsignedInt: (uint) 0,
            Uint8: (uint8) 0,
            Uint16: (uint16) 0,
            Uint32: (uint32) 0,
            Uint64: (uint64) 0,
            Float32: (float32) 0,
            Float64: (float64) 0,
            String: (string) ""
        },
        Containers: (serial.Containers) {
            Slice: ([]int) <nil>,
            Map: (map[string]string) <nil>,
            Array: ([]uint8) <nil>
        }
    }),
    Node2: (serial.NodeStruct2) {
        NodeName: (string) (len=11) "The Child 2",
        Size: (int) 3000,
        Size2: (int) -1,
        Interface: (interface {}) <nil>,
        Primitives: (serial.Primitives) {
            Boolean: (bool) false,
            Integer: (int) 0,
            Int8: (int8) 0,
            Int16: (int16) 0,
            Int32: (int32) 0,
            Int64: (int64) 0,
            UnsignedInt: (uint) 0,
            Uint8: (uint8) 0,
            Uint16: (uint16) 0,
            Uint32: (uint32) 0,
            Uint64: (uint64) 0,
            Float32: (float32) 0,
            Float64: (float64) 0,
            String: (string) ""
        },
        Containers: (serial.Containers) {
            Slice: ([]int) <nil>,
            Map: (map[string]string) <nil>,
            Array: ([]uint8) <nil>
        }
    },
    Interface: (interface {}) <nil>,
    Primitives: (serial.Primitives) {
        Boolean: (bool) false,
        Integer: (int) 0,
        Int8: (int8) 0,
        Int16: (int16) 0,
        Int32: (int32) 0,
        Int64: (int64) 0,
        UnsignedInt: (uint) 0,
        Uint8: (uint8) 0,
        Uint16: (uint16) 0,
        Uint32: (uint32) 0,
        Uint64: (uint64) 0,
        Float32: (float32) 0,
        Float64: (float64) 0,
        String: (string) ""
    },
    Containers: (serial.Containers) {
        Slice: ([]int) <nil>,
        Map: (map[string]string) <nil>,
        Array: ([]uint8) <nil>
    }
}

--- PASS: TestPrint (0.01s)
=== RUN   TestClone
D[10-11|17:53:20.338] Trying to set Interface                      child="&{NodeName:The Node 1 Size:1000 Interface:<nil> Primitives:{Boolean:false Integer:0 Int8:0 Int16:0 Int32:0 Int64:0 UnsignedInt:0 Uint8:0 Uint16:0 Uint32:0 Uint64:0 Float32:0 Float64:0 String:} Containers:{Slice:[] Map:map[] Array:[]}}" type=*serial.NodeStruct1 value="<*serial.NodeStruct1 Value>"
D[10-11|17:53:20.338] Trying to set Interface                      child="{NodeName:The Child 2 Size:3000 Size2:-1 Interface:<nil> Primitives:{Boolean:false Integer:0 Int8:0 Int16:0 Int32:0 Int64:0 UnsignedInt:0 Uint8:0 Uint16:0 Uint32:0 Uint64:0 Float32:0 Float64:0 String:} Containers:{Slice:[] Map:map[] Array:[]}}" type=serial.NodeStruct2 value="<serial.NodeStruct2 Value>"
--- PASS: TestClone (0.00s)
=== RUN   TestExtend
D[10-11|17:53:20.338] Extended is                                  opp2="{Type:*serial.RootStruct2 Fields:map[RootName:The Root 2 Count:2000 Node1:{Type:*serial.NodeStruct1 Fields:map[NodeName:The Node 1 Size:1000 Interface:<nil> Primitives:{Type:serial.Primitives Fields:map[UnsignedInt:0 Uint32:0 String: Int8:0 Int16:0 Int32:0 Boolean:false Int64:0 Uint16:0 Uint64:0 Float32:0 Integer:0 Uint8:0 Float64:0]} Containers:{Type:serial.Containers Fields:map[Slice:[] Map:map[] Array:[]]}]} Node2:{Type:serial.NodeStruct2 Fields:map[NodeName:The Child 2 Size:3000 Size2:-1 Interface:<nil> Primitives:{Type:serial.Primitives Fields:map[UnsignedInt:0 Uint16:0 Int8:0 Int32:0 Uint8:0 String: Int16:0 Uint64:0 Boolean:false Integer:0 Int64:0 Uint32:0 Float32:0 Float64:0]} Containers:{Type:serial.Containers Fields:map[Array:[] Slice:[] Map:map[]]}]} Interface:<nil> Primitives:{Type:serial.Primitives Fields:map[Boolean:false Int16:0 Int64:0 Float64:0 String: Int32:0 Uint16:0 Float32:0 Integer:0 Uint64:0 Uint32:0 Int8:0 UnsignedInt:0 Uint8:0]} Containers:{Type:serial.Containers Fields:map[Slice:[] Map:map[] Array:[]]}]}" opp="&{RootName:The Root 2 Count:2000 Node1:0x149f600 Node2:{NodeName:The Child 2 Size:3000 Size2:-1 Interface:<nil> Primitives:{Boolean:false Integer:0 Int8:0 Int16:0 Int32:0 Int64:0 UnsignedInt:0 Uint8:0 Uint16:0 Uint32:0 Uint64:0 Float32:0 Float64:0 String:} Containers:{Slice:[] Map:map[] Array:[]}} Interface:<nil> Primitives:{Boolean:false Integer:0 Int8:0 Int16:0 Int32:0 Int64:0 UnsignedInt:0 Uint8:0 Uint16:0 Uint32:0 Uint64:0 Float32:0 Float64:0 String:} Containers:{Slice:[] Map:map[] Array:[]}}"
--- PASS: TestExtend (0.00s)
=== RUN   TestSerialize
final buffer:
(string) (len=1227) "{\"Type\":\"*serial.RootStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Count\":2000,\"Interface\":null,\"Node1\":{\"Type\":\"*serial.NodeStruct1\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Node 1\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":1000}},\"Node2\":{\"Type\":\"serial.NodeStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Child 2\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":3000,\"Size2\":-1}},\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"RootName\":\"The Root 2\"}}"

D[10-11|17:53:20.339] Serialized Worked, return is                 buffer="{\"Type\":\"*serial.RootStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Count\":2000,\"Interface\":null,\"Node1\":{\"Type\":\"*serial.NodeStruct1\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Node 1\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":1000}},\"Node2\":{\"Type\":\"serial.NodeStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Child 2\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":3000,\"Size2\":-1}},\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"RootName\":\"The Root 2\"}}"
--- PASS: TestSerialize (0.00s)
=== RUN   TestPolymorphism
final buffer:
(string) (len=1227) "{\"Type\":\"*serial.RootStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Count\":2000,\"Interface\":null,\"Node1\":{\"Type\":\"*serial.NodeStruct1\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Node 1\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":1000}},\"Node2\":{\"Type\":\"serial.NodeStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Child 2\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":3000,\"Size2\":-1}},\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"RootName\":\"The Root 2\"}}"

Deserialize the string:
(string) (len=1227) "{\"Type\":\"*serial.RootStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Count\":2000,\"Interface\":null,\"Node1\":{\"Type\":\"*serial.NodeStruct1\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Node 1\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":1000}},\"Node2\":{\"Type\":\"serial.NodeStruct2\",\"Fields\":{\"Containers\":{\"Type\":\"serial.Containers\",\"Fields\":{\"Array\":null,\"Map\":null,\"Slice\":null}},\"Interface\":null,\"NodeName\":\"The Child 2\",\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"Size\":3000,\"Size2\":-1}},\"Primitives\":{\"Type\":\"serial.Primitives\",\"Fields\":{\"Boolean\":false,\"Float32\":0,\"Float64\":0,\"Int16\":0,\"Int32\":0,\"Int64\":0,\"Int8\":0,\"Integer\":0,\"String\":\"\",\"Uint16\":0,\"Uint32\":0,\"Uint64\":0,\"Uint8\":0,\"UnsignedInt\":0}},\"RootName\":\"The Root 2\"}}"

D[10-11|17:53:20.339] Trying to set Interface                      child="&{NodeName:The Node 1 Size:1000 Interface:<nil> Primitives:{Boolean:false Integer:0 Int8:0 Int16:0 Int32:0 Int64:0 UnsignedInt:0 Uint8:0 Uint16:0 Uint32:0 Uint64:0 Float32:0 Float64:0 String:} Containers:{Slice:[] Map:map[] Array:[]}}" type=*serial.NodeStruct1 value="<*serial.NodeStruct1 Value>"
D[10-11|17:53:20.339] Trying to set Interface                      child="{NodeName:The Child 2 Size:3000 Size2:-1 Interface:<nil> Primitives:{Boolean:false Integer:0 Int8:0 Int16:0 Int32:0 Int64:0 UnsignedInt:0 Uint8:0 Uint16:0 Uint32:0 Uint64:0 Float32:0 Float64:0 String:} Containers:{Slice:[] Map:map[] Array:[]}}" type=serial.NodeStruct2 value="<serial.NodeStruct2 Value>"
final result:
(*serial.RootStruct2)({
    RootName: (string) (len=10) "The Root 2",
    Count: (int) 2000,
    Node1: (*serial.NodeStruct1)({
        NodeName: (string) (len=10) "The Node 1",
        Size: (int) 1000,
        Interface: (interface {}) <nil>,
        Primitives: (serial.Primitives) {
            Boolean: (bool) false,
            Integer: (int) 0,
            Int8: (int8) 0,
            Int16: (int16) 0,
            Int32: (int32) 0,
            Int64: (int64) 0,
            UnsignedInt: (uint) 0,
            Uint8: (uint8) 0,
            Uint16: (uint16) 0,
            Uint32: (uint32) 0,
            Uint64: (uint64) 0,
            Float32: (float32) 0,
            Float64: (float64) 0,
            String: (string) ""
        },
        Containers: (serial.Containers) {
            Slice: ([]int) <nil>,
            Map: (map[string]string) <nil>,
            Array: ([]uint8) <nil>
        }
    }),
    Node2: (serial.NodeStruct2) {
        NodeName: (string) (len=11) "The Child 2",
        Size: (int) 3000,
        Size2: (int) -1,
        Interface: (interface {}) <nil>,
        Primitives: (serial.Primitives) {
            Boolean: (bool) false,
            Integer: (int) 0,
            Int8: (int8) 0,
            Int16: (int16) 0,
            Int32: (int32) 0,
            Int64: (int64) 0,
            UnsignedInt: (uint) 0,
            Uint8: (uint8) 0,
            Uint16: (uint16) 0,
            Uint32: (uint32) 0,
            Uint64: (uint64) 0,
            Float32: (float32) 0,
            Float64: (float64) 0,
            String: (string) ""
        },
        Containers: (serial.Containers) {
            Slice: ([]int) <nil>,
            Map: (map[string]string) <nil>,
            Array: ([]uint8) <nil>
        }
    },
    Interface: (interface {}) <nil>,
    Primitives: (serial.Primitives) {
        Boolean: (bool) false,
        Integer: (int) 0,
        Int8: (int8) 0,
        Int16: (int16) 0,
        Int32: (int32) 0,
        Int64: (int64) 0,
        UnsignedInt: (uint) 0,
        Uint8: (uint8) 0,
        Uint16: (uint16) 0,
        Uint32: (uint32) 0,
        Uint64: (uint64) 0,
        Float32: (float32) 0,
        Float64: (float64) 0,
        String: (string) ""
    },
    Containers: (serial.Containers) {
        Slice: ([]int) <nil>,
        Map: (map[string]string) <nil>,
        Array: ([]uint8) <nil>
    }
})

original wrapper:
(*map[string]interface {})((len=2) {
    (string) (len=6) "Fields": (map[string]interface {}) (len=7) {
        (string) (len=10) "Containers": (map[string]interface {}) (len=2) {
            (string) (len=6) "Fields": (map[string]interface {}) (len=3) {
                (string) (len=5) "Array": (interface {}) <nil>,
                (string) (len=3) "Map": (interface {}) <nil>,
                (string) (len=5) "Slice": (interface {}) <nil>
            },
            (string) (len=4) "Type": (string) (len=17) "serial.Containers"
        },
        (string) (len=5) "Count": (float64) 2000,
        (string) (len=9) "Interface": (interface {}) <nil>,
        (string) (len=5) "Node1": (map[string]interface {}) (len=2) {
            (string) (len=6) "Fields": (map[string]interface {}) (len=5) {
                (string) (len=10) "Containers": (map[string]interface {}) (len=2) {
                    (string) (len=6) "Fields": (map[string]interface {}) (len=3) {
                        (string) (len=5) "Array": (interface {}) <nil>,
                        (string) (len=3) "Map": (interface {}) <nil>,
                        (string) (len=5) "Slice": (interface {}) <nil>
                    },
                    (string) (len=4) "Type": (string) (len=17) "serial.Containers"
                },
                (string) (len=9) "Interface": (interface {}) <nil>,
                (string) (len=8) "NodeName": (string) (len=10) "The Node 1",
                (string) (len=10) "Primitives": (map[string]interface {}) (len=2) {
                    (string) (len=6) "Fields": (map[string]interface {}) (len=14) {
                        (string) (len=7) "Boolean": (bool) false,
                        (string) (len=7) "Float32": (float64) 0,
                        (string) (len=7) "Float64": (float64) 0,
                        (string) (len=5) "Int16": (float64) 0,
                        (string) (len=5) "Int32": (float64) 0,
                        (string) (len=5) "Int64": (float64) 0,
                        (string) (len=4) "Int8": (float64) 0,
                        (string) (len=7) "Integer": (float64) 0,
                        (string) (len=6) "String": (string) "",
                        (string) (len=6) "Uint16": (float64) 0,
                        (string) (len=6) "Uint32": (float64) 0,
                        (string) (len=6) "Uint64": (float64) 0,
                        (string) (len=5) "Uint8": (float64) 0,
                        (string) (len=11) "UnsignedInt": (float64) 0
                    },
                    (string) (len=4) "Type": (string) (len=17) "serial.Primitives"
                },
                (string) (len=4) "Size": (float64) 1000
            },
            (string) (len=4) "Type": (string) (len=19) "*serial.NodeStruct1"
        },
        (string) (len=5) "Node2": (map[string]interface {}) (len=2) {
            (string) (len=6) "Fields": (map[string]interface {}) (len=6) {
                (string) (len=10) "Containers": (map[string]interface {}) (len=2) {
                    (string) (len=6) "Fields": (map[string]interface {}) (len=3) {
                        (string) (len=5) "Array": (interface {}) <nil>,
                        (string) (len=3) "Map": (interface {}) <nil>,
                        (string) (len=5) "Slice": (interface {}) <nil>
                    },
                    (string) (len=4) "Type": (string) (len=17) "serial.Containers"
                },
                (string) (len=9) "Interface": (interface {}) <nil>,
                (string) (len=8) "NodeName": (string) (len=11) "The Child 2",
                (string) (len=10) "Primitives": (map[string]interface {}) (len=2) {
                    (string) (len=6) "Fields": (map[string]interface {}) (len=14) {
                        (string) (len=7) "Boolean": (bool) false,
                        (string) (len=7) "Float32": (float64) 0,
                        (string) (len=7) "Float64": (float64) 0,
                        (string) (len=5) "Int16": (float64) 0,
                        (string) (len=5) "Int32": (float64) 0,
                        (string) (len=5) "Int64": (float64) 0,
                        (string) (len=4) "Int8": (float64) 0,
                        (string) (len=7) "Integer": (float64) 0,
                        (string) (len=6) "String": (string) "",
                        (string) (len=6) "Uint16": (float64) 0,
                        (string) (len=6) "Uint32": (float64) 0,
                        (string) (len=6) "Uint64": (float64) 0,
                        (string) (len=5) "Uint8": (float64) 0,
                        (string) (len=11) "UnsignedInt": (float64) 0
                    },
                    (string) (len=4) "Type": (string) (len=17) "serial.Primitives"
                },
                (string) (len=4) "Size": (float64) 3000,
                (string) (len=5) "Size2": (float64) -1
            },
            (string) (len=4) "Type": (string) (len=18) "serial.NodeStruct2"
        },
        (string) (len=10) "Primitives": (map[string]interface {}) (len=2) {
            (string) (len=6) "Fields": (map[string]interface {}) (len=14) {
                (string) (len=7) "Boolean": (bool) false,
                (string) (len=7) "Float32": (float64) 0,
                (string) (len=7) "Float64": (float64) 0,
                (string) (len=5) "Int16": (float64) 0,
                (string) (len=5) "Int32": (float64) 0,
                (string) (len=5) "Int64": (float64) 0,
                (string) (len=4) "Int8": (float64) 0,
                (string) (len=7) "Integer": (float64) 0,
                (string) (len=6) "String": (string) "",
                (string) (len=6) "Uint16": (float64) 0,
                (string) (len=6) "Uint32": (float64) 0,
                (string) (len=6) "Uint64": (float64) 0,
                (string) (len=5) "Uint8": (float64) 0,
                (string) (len=11) "UnsignedInt": (float64) 0
            },
            (string) (len=4) "Type": (string) (len=17) "serial.Primitives"
        },
        (string) (len=8) "RootName": (string) (len=10) "The Root 2"
    },
    (string) (len=4) "Type": (string) (len=19) "*serial.RootStruct2"
})

--- PASS: TestPolymorphism (0.01s)
PASS
ok  	github.com/Oneledger/protocol/node/serial	0.049s
